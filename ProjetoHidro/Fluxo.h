//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Fluxo.h
//  @ Date : 19/09/2011
//  @ Author : 
//
//


#if !defined(_FLUXO_H)
#define _FLUXO_H

#include<map>
#include<queue>
#include<iostream>

using namespace std;


class Fluxo {
public:


    //===Construtores e destrutor======///
    Fluxo();
    Fluxo(int nLinhas, int nColunas);
    Fluxo(Fluxo const&);//de copia
    ~Fluxo();//destrutor




    //=========Atributos======////
    unsigned char **direcao;//matriz que define a direcao de fluxo de cada celula
    int **fluxo;//define o fluxo acumulado
    bool **rio;//define se o elemento é rio ou nao

    int fluxoMinimo;
    int valorPadraoFluxo;
    int nLinhas;
    int nColunas;
    int qtdeCelulasRio;
    const static int limiteAltidude = 32768;//tamanho de um inteiro
    const static int processado = 255;

    typedef pair<int,int> ponto;//objeto que facilita o acesso para ser armazenado
    queue<ponto> vetorDeFilasDeNiveis[2*limiteAltidude];//armazena os pontos proximos a ser inundado

    const static int direcaoDeFluxo[129][2];//matriz que contem as direcoes de fluxo para num predefinido

    //valores de direcao de fluxo, localizacao de numeros pre-definidos
    /*1     2     4
          128         8
          64    32    16
          Começa por 1 sentido horario
        */

    const static int dirEsquerdaCima = 1;

    const static int dirCima = 2;

    const static int dirDireitaCima = 4;

    const static int dirDireita = 8;

    const static int dirDireitaBaixo = 16;
    const static int dirBaixo = 32;
    const static int dirEsquerdaBaixo = 64;
    const static int dirEsquerda = 128;


    //====metodos

    void calculaFluxo(short int** elevacoes,int);


private:
    //====metodos
    void setFluxo(short int** elevacoes);
    void setInundacao(short int** elevacoes);
    void setRio(short int**,int);
};

#endif  //_FLUXO_H
