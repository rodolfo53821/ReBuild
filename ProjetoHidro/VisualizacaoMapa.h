//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : VisualizacaoMapa.h
//  @ Date : 06/09/2011
//  @ Author : 
//
//


#if !defined(_VISUALIZACAOMAPA_H)
#define _VISUALIZACAOMAPA_H

#include "MapaMDE.h"
#include "Fluxo.h"
#include "Inundacao.h"
#include "Camada.h"
#include "QColor"





class VisualizacaoMapa {
public:

    //===construtores e destrutor
    VisualizacaoMapa();
    VisualizacaoMapa(const char *,int,int);
    VisualizacaoMapa(VisualizacaoMapa const&);//---construtor copia
    ~VisualizacaoMapa(); //---Destrutor
    VisualizacaoMapa& operator=(VisualizacaoMapa const&);




    //==========Atributos============
    MapaMDE *mapa;
    Fluxo *fluxo;
    Inundacao *inundacao;
    QList<Camada> *listaDeCamadas;//lista contendo as camadas adicionadas pelo user
    short int **camadasSomadas;//camada unica que contem o valor da soma dos pesos da camada
    double **vetorDeZooms;

    int marcaInicioX;
    int marcaInicioY; //Guarda posicao inicial de marcação para barragem
    int marcaFinalX;
    int marcaFinalY; //Guarda posicao final de marcação para barragem
    bool marcouInicio; //Informa se o inicio do trecho ja foi marcado
    bool marcouFim;//Informa se o fim do trecho ja foi marcado


    double proporcaoZoom;//variavel que determina a proporcao do zoom atual para ser usado no tamanho do ponto entre outras coisas
    double constanteDeProporcaoZoom;//constante pra ser utilizada no proporcaoZoom
    int tamanhoDaBarraDeZoom;
    int maxPointSize;//tamanho maximo do ponto do opengl
    bool estaPreSalvo;


    //peso que sera utilizado para calcula a funcao objetivo
    int pesoEBarragem;
    int pesoHBarragem;
    int pesoAreaAlagada;
    int pesoVolume;
    int pesoABarragem;
    int pesoCamadas;
    const static int pesoEBarragemPadrao = 10;
    const static int pesoHBarragemPadrao = 10;
    const static int pesoAreaAlagadaPadrao = 10;
    const static int pesoVolumePadrao = 10;
    const static int pesoABarragemPadrao = 10;
    const static int pesoCamadasPadrao = 0;


    int maxPontosABuscar;//usado para limitar a busca em buscas com recursividade


    //==========Métodos============
    int getFuncaoObjetivo();//retorna a funcao objetivo
    void atualizaCamadasSomadas();//atualiza a matriz de camadas somadas
    void atualizaPesoCamadas();
    void atualizaPesos(int,int,int,int,int);//atualiza os pesos das características

    int getIndCamada (QString);//busca em listaDeCamada uma camada com o nome dado

    MapaMDE *getMapa();
    double getProporcaoZoom();
    int getZoom(),getTamanhoDoPonto(),getProporcaoX(),getProporcaoY();
    void setTamanhoPonto(int ,int);
    void setZoom(int zoom);

    void setInundacao(int posX, int posY,int,int,int);
    void encontraPontosJusante(int x, int y,bool& , bool**,int &);//metodo recurso para definir os pontos a serem buscados

    void insereCamada(Camada);

    //===metodos sobescritos
    QList<Camada>& operator=(QList<Camada> const&);
    bool operator==(QList<Camada> const&);


private:


    //===atributos
    QColor corMapa;
    double proporcaoTela;
    int proporcaoX;
    int proporcaoY;
    int tamanhoDoPonto;
    int larguraTela;
    int alturaTela;
    int zoom;

};

#endif  //_VISUALIZACAOMAPA_H
